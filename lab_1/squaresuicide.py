import math
import numpy as np
import pprint
import random


def SS(A, B):
    U = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    Ut = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

    U[0][0] = (A[0][0]) ** (1 / 2)
    U[0][1] = A[0][1] / U[0][0]
    U[0][2] = A[0][2] / U[0][0]
    U[0][3] = A[0][3] / U[0][0]

    U[1][1] = ((A[1][1]) - U[0][1] ** 2) ** (1 / 2)
    for j in range(2, 4):
        U[1][j] = (A[1][j] - U[0][1] * U[0][j]) / U[1][1]

    U[2][2] = (A[2][2] - (U[0][2] ** 2 + U[1][2] ** 2)) ** (1 / 2)
    U[2][3] = ((A[2][3] - (U[0][2] * U[0][3]) + (U[1][2] * U[1][3])) / U[2][2])

    U[3][3] = (A[3][3] - (U[0][3] ** 2 + U[1][3] ** 2 + U[2][3] ** 2)) ** (1 / 2)


    U = np.array(U)
    Ut = U.transpose()
    Ut.tolist()
    U.tolist()



    y = []

    y.append(B[0] / Ut[0][0])
    y.append((B[1] - Ut[1][0] * y[0]) / Ut[1][1])
    y.append((B[2] - Ut[2][0] * y[0] - Ut[2][1] * y[1]) / Ut[2][2])
    y.append((B[3] - Ut[3][0] * y[0] - Ut[3][1] * y[1] - Ut[3][2] * y[2]) / Ut[3][3])

    x = []

    x.append(y[3] / U[3][3])
    x.append((y[2] - U[2][3] * x[0]) / U[2][2])
    x.append((y[1] - U[1][3] * x[0] - U[1][2] * x[1]) / U[1][1])
    x.append((y[0] - U[0][3] * x[0] - U[0][2] * x[1] - U[0][1] * x[2]) / U[0][0])

    x.reverse()

    return x
